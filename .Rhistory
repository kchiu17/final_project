## read the data
##
all_data <- read.csv("test.csv", stringsAsFactors = FALSE)
print(all_data)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
library(dplyr)
## filter out North American observations
print(names(all_data))
## filter out North American observations
rownames(all_data)
## filter out North American observations
colnames(all_data)
## filter out North American observations
america_data <- all_data %>% filter(longitude > 180, longitude < 330, latitude > 15, latitude < 80)
america_1960 <- filter(america_data, grepl("1960-06", time))
america_1986 <- filter(america_data, grepl("1986-06", time))
america_2014 <- filter(america_data, grepl("2014-06", time))
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
install.packages("ggplot2")
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
ggplot(data = america_1960, aes(lon, lat, fill = elevation)) +
geom_tile() +
coord_quickmap() +
scale_fill_gradientn(colors = terrain.colors(10))
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
ggplot(data = america_1960, aes(longitude, latitude, fill = airtemp)) +
geom_tile() +
coord_quickmap() +
scale_fill_gradientn(colors = terrain.colors(10))
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
ggplot(data = america_1960, aes(longitude, latitude, fill = airtemp)) +
geom_tile() +
coord_quickmap() +
scale_fill_gradientn(colors = terrain.colors(2))
.rs.restartR()
## select jpg graphics device
jpeg("airtemp_america_1960.jpg")
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
ggplot(data = america_1960, aes(longitude, latitude, fill = airtemp)) +
geom_tile() +
coord_quickmap() +
scale_fill_gradientn(colors = terrain.colors(2))
## close the device
dev.off()
colnames(america_1960)
source('C:/Users/lacac/Desktop/INFO201/a6-server-Dudethq/maps.R', echo=TRUE)
source('C:/Users/lacac/Desktop/INFO201/a6-server-Dudethq/maps.R', echo=TRUE)
source('C:/Users/lacac/Desktop/INFO201/a6-server-Dudethq/maps.R', echo=TRUE)
source('C:/Users/lacac/Desktop/INFO201/a6-server-Dudethq/maps.R', echo=TRUE)
## read the data
##
all_data <- read.csv("test.csv", stringsAsFactors = FALSE)
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
## filter out North American observations
america_data <- all_data %>% filter(longitude > 180, longitude < 330, latitude > 15, latitude < 80)
america_1960 <- filter(america_data, grepl("1960-06", time))
america_1986 <- filter(america_data, grepl("1986-06", time))
america_2014 <- filter(america_data, grepl("2014-06", time))
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(all_data)
houses_city_data <- read.csv("houses_city_data.csv", stringsAsFactors = FALSE)
houses_city_data <- read.csv("houses_city_data.csv", stringsAsFactors = FALSE)
houses_city_data <- read.csv("houses_city_data.csv", stringsAsFactors = FALSE)
houses_city_data <- read.csv("houses_city_data.csv", stringsAsFactors = FALSE)
getwd()
setwd(..)
setwd("..")
getwd()
setwd("./Final Project 201")
getwd()
houses_city_data <- read.csv("houses_city_data.csv", stringsAsFactors = FALSE)
colnames(houses_city_data)
library(dplyr)
WA_data <- houses_city_data %>% filter(state = "Washington")
WA_data <- houses_city_data %>% filter(state == "Washington")
WA_data <- houses_city_data %>% filter(State == "Washington")
WA_data <- houses_city_data %>% filter(State == "WA")
View(WA_data)
WA_forecast <- houses_forecast_data %>% filter(State == "WA")
houses_forecast_data <- read.csv("houses_forecast_data.csv", stringsAsFactors = FALSE)
WA_forecast <- houses_forecast_data %>% filter(State == "WA")
colnames(houses_forecast_data)
View(WA_data)
WA_forecast <- houses_forecast_data %>% filter(StateName == "WA")
View(WA_forecast)
View(WA_data)
