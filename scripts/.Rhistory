## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, string) {
introduction <- make_introduction(name, age)
today <- as.Date(Sys.Date())
N <- as.Date(string) - today
new_age <- age + 1
paste(introduction, "In", N, "days I'll be", new_age, ".")
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019/09/17")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(vector) {
##install.packages("tm")
library(tm)
vector <- removeNumbers(vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
classes <- c("GEOG 260", "GEOG 360", "INFO 201", "mps-352x")
RemoveDigits(classes)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
have_digits <- grepl("\\d", RemoveDigits(classes))
if(TRUE %in% have_digits) {
print("Oh no!")
} else {
print("Yay!")
}
## a2-foundational-skills
## -------------------- Set up and Defining variables --------------------
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
install.packages("stringr")
library("stringr")
## Create a numeric variable `my_age` that is equal to your age
my_age <- 20
## Create a variable `my_name` that is equal to your first name
my_name <- "Kevin"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60 * 24
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 24 * 365
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute and print the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
seconds_in_year <- 60 * 60 * 24 * 365
print(seconds_in_year)
## How many seconds is a typical human lifetime?
seconds_in_human_lifespan <- seconds_in_year * 79
print(seconds_in_human_lifespan)
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computers,
## we can safely say that your code fails :-)
seconds_in_universe <- 13800000000 * seconds_in_year
print(seconds_in_universe)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
paste("Hello, my name is ", name, ", and I am ", age, " years old.", sep="")
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm ", my_intro)
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- tolower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(num) {
num * 2
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(num) {
num * num * num
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("The Presige", "Up", "Love Simon", "Kimi No Na Wa", "Avengers Infinity War", "Crazy Rich Asians")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(top_three, movies[5:6])
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- lower_numbers + numbers
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date(Sys.Date())
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018/12/15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, string) {
introduction <- make_introduction(name, age)
today <- as.Date(Sys.Date())
N <- as.Date(string) - today
new_age <- age + 1
paste(introduction, "In", N, "days I'll be", new_age, ".")
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019/09/17")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
## The best and fastest way is to utilize an existing function!
RemoveDigits <- function(vector) {
install.packages("tm")
library(tm)
vector <- removeNumbers(vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
classes <- c("GEOG 260", "GEOG 360", "INFO 201", "mps-352x")
RemoveDigits(classes)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
have_digits <- grepl("\\d", RemoveDigits(classes))
if(TRUE %in% have_digits) {
print("Oh no!")
} else {
print("Yay!")
}
install.packages("tm")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/INFO 201/a5-api-report-kchiu17/_keys.R_.R')
source("keys.R")
source("keys.R")
library(dplyr)
knitr::opts_chunk$set(error=TRUE)
```{r init, include=FALSE}
address <- "Seattle, WA"
```{r init, include=FALSE}
## load API keys
---
title: "Who Represents You?"
output:
html_document: default
css: styles.css
---
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
# Your Elected Officials
```{r init, include=FALSE}
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
```
```{r address, include=FALSE}
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
```
```{r processData}
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
```
## Your Representatives
Explain briefly what and how do you do here.  Provide links to the
corresponding API-s.
Include a table that includes all the officials for the given addres.
```{r}
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(repTable)
```
## House of Representatives
Make the visualization of party affiliation of the the congressional representatives
(in the House of Representatives, _not_ the Senate) for this address.
```{r}
##
## ggplot(stateReps, aes(gender)) + ...
```
Make another visualization too.
## Pick a Particular Representative.  Insert the name here in the title
Write a paragraph where you tell her name, party, age, and twitter
link.  Find out how often she recently voted with the majority.
address <- "Seattle, WA"
address <- "Seattle, NY"
## insert your address here.  It does not to have quite complete.
address <- "Seattle, YIEKS"
---
title: "Who Represents You?"
output:
html_document: default
css: styles.css
---
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
# Your Elected Officials
```{r init, include=FALSE}
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
```
```{r address, include=FALSE}
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
```
```{r processData}
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
```
## Your Representatives
Explain briefly what and how do you do here.  Provide links to the
corresponding API-s.
Include a table that includes all the officials for the given addres.
```{r}
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(repTable)
```
## House of Representatives
Make the visualization of party affiliation of the the congressional representatives
(in the House of Representatives, _not_ the Senate) for this address.
```{r}
##
## ggplot(stateReps, aes(gender)) + ...
```
Make another visualization too.
## Pick a Particular Representative.  Insert the name here in the title
Write a paragraph where you tell her name, party, age, and twitter
link.  Find out how often she recently voted with the majority.
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
---
title: "Who Represents You?"
output:
html_document: default
css: styles.css
---
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
library(httr)
response <- GET("http://httpbin.org/get")
params <- list(access_token = "9a09c8fc030e434e89b6a121060bf154", address = address)
google_response <- GET("GET https://accounts.spotify.com/authorize", query = params)
body <- content(google_response, "text")
parsed_data <- fromJSON(body)
Sys.info()
shiny::runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
shiny::runApp('Desktop/INFO 201/a8-app-kchiu17')
shiny::runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='kchiu17', token='3C63D718397B462C19758F2C79DCEE83', secret='V0gvCrpIBPkMVRf8pyokAvk9+W4Hf1GlO7ISHe8p')
runApp('Desktop/INFO 201/a8-app-kchiu17')
runApp('Desktop/INFO 201/a8-app-kchiu17')
shiny::runApp('Desktop/INFO 201/a8-app-kchiu17')
source('~/Desktop/INFO 201/a5-api-report-kchiu17/Untitled.R')
hillsong_data <- get_artist_audio_features("Hillsong Worship")
source('keys.R')
setwd("~/Desktop/INFO 201/final_project")
library(dplyr)
library(ggplot2)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
source('keys.R')
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
View(godisable_data)
setwd("~/Desktop/INFO 201/final_project/scripts")
hillsong_data <- get_artist_audio_features("Hillsong Worship")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
View(godisable_data)
godisable_track_popularity <- godisable_data %>% select(track_name, track_popularity)
maroon5_data <- get_artist_audio_features("Maroon 5")
album_popularity <- get_album_popularity()
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
View(godisable_data)
godisable_track_popularity <- godisable_data %>% select(track_name, track_popularity)
maroon5_data <- get_artist_audio_features("Maroon 5")
album_popularity <- get_album_popularity()
## install.packages("ggplot2")
ggplot(godisable_track_popularity, aes(x=factor(1), fill=track_name))+
geom_bar(width = 1)+
coord_polar("y")
bp<- ggplot(godisable_track_popularity, aes(x="", y=track_popularity, fill=track_name))+
geom_bar(width = 1, stat = "identity") +
title("Popularity of Songs in Album")
bp
pie <- bp + coord_polar("y", start=0)
pie
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(godisable_data)
runApp()
runApp()
runApp()
runApp()
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
hillsong_data <- get_artist_audio_features("Hillsong Worship")
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
hillsong_data <- get_artist_audio_features()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
hillsong_data <- get_artist_audio_features("Hillsong Worship")
setwd("~/Desktop/INFO 201/final_project/scripts")
library(dplyr)
library(ggplot2)
## install.packages("devtools")
library(devtools)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
source('keys.R')
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
hillsong_data <- get_artist_audio_features("NCT 127")
hillsong_data <- get_artist_audio_features("NCT 127")
godisable_data <- hillsong_data %>% filter(album_name == "Simon Says")
godisable_data
View(godisable_data)
hillsong_data <- get_artist_audio_features("Maroon 5")
library(dplyr)
library(ggplot2)
## install.packages("devtools")
library(devtools)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
source('keys.R')
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Maroon 5")
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
View(godisable_data)
godisable_track_popularity <- godisable_data %>% select(track_name, track_popularity)
maroon5_data <- get_artist_audio_features("Maroon 5")
album_popularity <- get_album_popularity()
## install.packages("ggplot2")
ggplot(godisable_track_popularity, aes(x=factor(1), fill=track_name))+
geom_bar(width = 1)+
coord_polar("y")
bp<- ggplot(godisable_track_popularity, aes(x="", y=track_popularity, fill=track_name))+
geom_bar(width = 1, stat = "identity") +
title("Popularity of Songs in Album")
bp
pie <- bp + coord_polar("y", start=0)
pie
hillsong_data <- get_artist_audio_features("Maroon 5")
hillsong_data <- get_artist_audio_features("Hillsong Worship")
library(dplyr)
library(ggplot2)
## install.packages("devtools")
library(devtools)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
source('keys.R')
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
godisable_data <- hillsong_data %>% filter(album_name == "God Is Able")
View(godisable_data)
godisable_track_popularity <- godisable_data %>% select(track_name, track_popularity)
maroon5_data <- get_artist_audio_features("Maroon 5")
album_popularity <- get_album_popularity()
## install.packages("ggplot2")
ggplot(godisable_track_popularity, aes(x=factor(1), fill=track_name))+
geom_bar(width = 1)+
coord_polar("y")
bp<- ggplot(godisable_track_popularity, aes(x="", y=track_popularity, fill=track_name))+
geom_bar(width = 1, stat = "identity") +
title("Popularity of Songs in Album")
bp
pie <- bp + coord_polar("y", start=0)
pie
library(dplyr)
library(ggplot2)
## install.packages("devtools")
library(devtools)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
source('keys.R')
Sys.setenv(SPOTIFY_CLIENT_ID = spotify.id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = spotify.client.secret)
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
hillsong_data <- get_artist_audio_features("Hillsong Worship")
library(dplyr)
library(ggplot2)
## install.packages("devtools")
library(devtools)
## devtools::install_github('charlie86/spotifyr')
## install.packages("spotifyr")
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = "198cd9a9951141fb95d68fe7203ba125")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "fbde10ed2bff4ec094ebed4caf805e2c")
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
Sys.setenv(SPOTIFY_CLIENT_ID = "198cd9a9951141fb95d68fe7203ba125")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "fbde10ed2bff4ec094ebed4caf805e2c")
access_token <- get_spotify_access_token()
hillsong_data <- get_artist_audio_features("Hillsong Worship")
hillsong_data
hillsong_data
hillsong_data
hillsong_data <- get_artist_audio_features("Hillsong Worship")
